#!/usr/bin/env python
# -*- coding: utf-8 -*-

import NetworkManager
import uuid
import os
import ConfigParser
import IPy
from flask import current_app

try:
    LOG = current_app.logger
except Exception:
    import logging
    LOG = logging

NetworkManagerDir = '/etc/NetworkManager/system-connections/'

SUPPORTED_NM_DEVICE_TYPES = {
    NetworkManager.NM_DEVICE_TYPE_ETHERNET,
    NetworkManager.NM_DEVICE_TYPE_WIFI,
    NetworkManager.NM_DEVICE_TYPE_BRIDGE,
    NetworkManager.NM_DEVICE_TYPE_TUN
}

NM_DEVICE_TYPE_STR_MAPPING = {
    NetworkManager.NM_DEVICE_TYPE_ETHERNET: "802-3-ethernet",
    NetworkManager.NM_DEVICE_TYPE_WIFI: "802-11-wireless",
    NetworkManager.NM_DEVICE_TYPE_BRIDGE: "bridge",
    NetworkManager.NM_DEVICE_TYPE_TUN: "tun"
}



def _populate_networkinfo_from_networkmanager(dev, networkinfo):
    # only use the first one address
    updates = {}
    if dev.Ip4Config:
        ip_addr, fixed_len, gateway = dev.Ip4Config.Addresses[0]
        updates = {
            'ip': ip_addr,
            'subnet_mask': intToMask(fixed_len), # str
            'gateway': gateway,
            'dns': ';'.join(dev.Ip4Config.Nameservers),
            'is_auto': bool(dev.Dhcp4Config)
        }

    networkinfo.update(updates)


def _get_config(cfg, section, option, default=None, force_raise=False):
    try:
        return cfg.get(section, option)
    except ConfigParser.NoOptionError as e:
        if force_raise:
            raise e
        return default


def _populate_networkinfo_from_file(dev, networkinfo):
    config_file = "%s%s" % (NetworkManagerDir, networkinfo["id"])
    config = ConfigParser.ConfigParser()
    try:
        with open(config_file) as fp:
            config.readfp(fp, config_file)
    except IOError as e:
        LOG.warning("Cannot get config from %s. Because: %s" 
                            % (config_file, e))
        raise

    method = _get_config(config, 'ipv4', 'method', default='auto')
    updates = {
        'dns': _get_config(config, 'ipv4', 'dns', default=""),
        'is_auto': (method == "auto"),
    }

    # address is in the form like ip_address/fixed_len,gateway
    address = _get_config(config, 'ipv4', 'address1')
    if address:
        interface_addr = address = address.strip()
        _v = address.split(",", 1)
        if len(_v) > 1:
            interface_addr = _v[0].strip()
            updates["gateway"] = _v[1].strip()
            if not isIP(updates["gateway"]):
                raise ValueError("Invalid gateway %s in %s" \
                                 % (updates["gateway"], config_file))

        _v = interface_addr.split("/", 1)
        updates["ip"] = _v[0].strip()
        updates["subnet_mask"] = intToMask(int(_v[1].strip()))
        if not isIP(updates["ip"]):
            raise ValueError("Invalid ip address %s in %s" \
                             % (updates["ip"], config_file))

    networkinfo.update(updates)

def get_all_mac():
    all_mac =  [dev.HwAddress for dev in NetworkManager.NetworkManager.GetAllDevices()
                if dev.DeviceType == NetworkManager.NM_DEVICE_TYPE_ETHERNET]
    return all_mac

def getNetworkInfo():
    networkInfos = []

    for dev in NetworkManager.NetworkManager.GetAllDevices():
        if dev.DeviceType not in SUPPORTED_NM_DEVICE_TYPES:
            continue
        networkInfo = {
            'id': dev.Interface,
            'mac': dev.HwAddress,
            'type': dev.DeviceType, 
            'ip': '',
            'subnet_mask': '',
            'gateway': '',
            'dns': '',
            'is_auto': True,
            'lan': dev.Interface,  # 前台展现?
        }

        if dev.State == NetworkManager.NM_DEVICE_STATE_ACTIVATED:
            _populate_networkinfo_from_networkmanager(dev, networkInfo)
        else:
            try:
                # To-do(mozz): get connection info from nm connections
                # conn.GetSettings()
                _populate_networkinfo_from_file(dev, networkInfo)
            except Exception as e:
                LOG.warning("Cannot get %s network info. Because of %s" 
                            % (dev.Interface, e))
        networkInfos.append(networkInfo)
    return networkInfos


def add_and_active_connection(conn_info):
    """Add and active NM connection
    
    默认绑定的设备从 conn_info["connection"]["interface-name"] 取得.

    """

    def _find_dev(device_name):
        for dev in NetworkManager.NetworkManager.GetAllDevices():
            if dev.Interface == device_name:
                break
        else:
            raise KeyError("Device %s is not found." % device_name)
        return dev

    try:
        device_name = conn_info["connection"]["interface-name"]
    except KeyError:
        raise Exception("interface-name is required in conn_info %s." 
                        % (conn_info,))
    dev = _find_dev(device_name)

    # # 删除老配置
    # file = '%s%s' % (NetworkManagerDir, device_name)
    # if os.path.exists(file):
    #     os.remove(file)

    # 保存当前配置
    conn = NetworkManager.Settings.AddConnection(conn_info)
    # 加载新配置到NM中
    NetworkManager.Settings.ReloadConnections()
    # 激活制定connection
    return NetworkManager.NetworkManager.ActivateConnection(conn, dev, "/")


def setNetwork(device_name, mac, address, netmask, gateway, dns, eth_type):
    if not isIP(address):
        raise KeyError("Invalid ip address %s for device %s" 
                       % (address, device_name))

    eth_type = int(eth_type)
    try:
        conn_type = NM_DEVICE_TYPE_STR_MAPPING[eth_type]
    except KeyError:
        raise KeyError("Unsupported device %s." % device_name)

    if not gateway: 
        gateway = '0.0.0.0'
    dns_list = []
    if dns:
        for s in map(lambda s: s.strip(), dns.split(";")):
            if not isIP(s):
                raise KeyError("Invalid dns server addresses %s for device %s" 
                               % (dns, device_name))
            dns_list.append(s)

    conn_info = {
        'connection':{'id':device_name,
                      'type':conn_type,
                      'uuid':str(uuid.uuid4()),
                      'interface-name':device_name
                      },
        '802-3-ethernet':{'mac-address':mac},
        'ipv4':{'method':'manual',
                'addresses':[(address, maskToInt(netmask), gateway)],
                'dns': dns_list},
        'ipv6':{'method':'auto'}
    }

    if gateway != "0.0.0.0":
        conn_info['ipv4']["gateway"] = gateway

    # If device is a virtual tap(tun), set tun mode to Ethernet-like layer 2.
    if eth_type == NetworkManager.NM_DEVICE_TYPE_TUN:
        conn_info["tun"] =  {"mode": 2}

    return add_and_active_connection(conn_info)
    

def setDHCP(id, mac):
    conn_info = {
        'connection':{'id':id,
                      'type':'802-3-ethernet',
                      'uuid':str(uuid.uuid4())},
        '802-3-ethernet':{'mac-address':mac},
        'ipv4':{'method':'auto'},
        'ipv6':{'method':'auto'}
    }

    return add_and_active_connection(conn_info)


def getWifiList():
    wifi_lists = {}
    wifi_list =[]
    for dev in NetworkManager.NetworkManager.GetDevices():
        if dev.DeviceType != NetworkManager.NM_DEVICE_TYPE_WIFI:
            continue
        for ap in dev.GetAccessPoints():
            wifi_dict = {}
            print('%-30s %dMHz %d%%' % (ap.Ssid, ap.Frequency, ap.Strength))
            wifi_dict.update(name=ap.Ssid)
            if ap.Flags == 0:
                wifi_dict.update(is_lock=False)
                wifi_dict.update(key_type='')
            else:
                wifi_dict.update(is_lock=True)
                wifi_dict.update(key_type='WPA2')
            wifi_dict.update(strength=ap.Strength)
            wifi_list.append(wifi_dict)
    wifi_lists.update(wifi_list=wifi_list)
    return wifi_lists

def connectWifi(id, is_lock, password):
    #print id,password
    if is_lock:
        conn_info = {
            '802-11-wireless': {'mode':'infrastructure',
                                'security':'802-11-wireless-security',
                                'ssid': id},
            #'802-11-wireless-security':{'auth-alg':'open','key-mgmt':'wpa-eap'},
            #'802-1x':{'eap': ['peap'],
                #'identity': name,
                #'password': password,
                #'phase2-auth':'mschapv2'
            #},
            '802-11-wireless-security': {'key-mgmt': 'wpa-psk', 'psk': password},
            'connection':{'id':id,
                          'type':'802-11-wireless',
                          'uuid':str(uuid.uuid4())},
            'ipv4':{'method':'auto'},
            'ipv6':{'method':'auto'}
        }
    else:
        conn_info = {
            '802-11-wireless': {'mode': 'infrastructure',
                                'security': '802-11-wireless-security',
                                'ssid': id},
            'connection': {'id': id,
                           'type': '802-11-wireless',
                           'uuid': str(uuid.uuid4())},
            'ipv4': {'method': 'auto'},
            'ipv6': {'method': 'auto'}
        }
    file = '/etc/NetworkManager/system-connections/%s' % (id)
    if os.path.exists(file):
        os.remove(file)
    NetworkManager.Settings.AddConnection(conn_info)
    NetworkManager.Settings.ReloadConnections()

def maskToInt(mask):
    count_bit = lambda bin_str: len([i for i in bin_str if i == '1'])
    mask_splited = mask.split('.')
    mask_count = [count_bit(bin(int(i))) for i in mask_splited]
    return sum(mask_count)

def intToMask(n):
    bin_arr = ['0' for i in range(32)]
    for i in range(n):
        bin_arr[i] = '1'
    tmpmask = [''.join(bin_arr[i * 8: i * 8 + 8]) for i in range(4)]
    tmpmask = [str(int(tmpstr, 2)) for tmpstr in tmpmask]
    return '.'.join(tmpmask)

def isIP(addr):
    try:
        IPy.IP(addr)
        return True
    except Exception as e:
        return False

if __name__ == '__main__':
    #print maskToInt('255.255.255.0')
    #print intToMask(16)
    networkInfos = getNetworkInfo()
    for networkInfo in networkInfos:
        print networkInfo
    #setDHCP('Wired connection 1', '00:0c:29:35:c1:f9')
    #setDHCP('Wired connection 2', '00:0c:29:35:c1:03')
    #setNetwork('Wired connection 1', '00:0c:29:35:c1:f9', '192.168.1.100', '255.255.255.0', '192.168.1.1', '114.114.114.114')
    #setNetwork('Wired connection 2', '00:0c:29:35:c1:03', '192.168.1.250', '255.255.255.0', '192.168.1.254', '8.8.8.8')
    print getWifiList()
    #connectWifi('zwol', True, '147258369')
    #connectWifi('zwol2', False, '123456')

